package dao;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;

import model.Boisson;
import model.Commande;
import model.CommandeState;
import model.MenuItem;
import model.Plat;
import service.CommandeEnCours;
import service.CommandeLivree;
import service.NouvelleCommande;


public class CommandeDao {
	private Connection connection;

    public CommandeDao() {
        try {
            connection = DBConnection.getConnection();
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }

    public void ajouter(Commande commande) throws SQLException {
        String query = "INSERT INTO commandes (etat) VALUES (?)";
        try (PreparedStatement stmt = connection.prepareStatement(query, Statement.RETURN_GENERATED_KEYS)) {
            stmt.setString(1, commande.getEtat().getClass().getSimpleName());
            stmt.executeUpdate();

            try (ResultSet rs = stmt.getGeneratedKeys()) {
                if (rs.next()) {
                    int commandeId = rs.getInt(1);
                    for (MenuItem item : commande.getItems()) {
                        String insertItemQuery = "INSERT INTO commande_items (commande_id, item_id) VALUES (?, ?)";
                        try (PreparedStatement itemStmt = connection.prepareStatement(insertItemQuery)) {
                            itemStmt.setInt(1, commandeId);
                            itemStmt.setInt(2, getItemId(item.getName())); // Vous devrez créer une méthode pour récupérer l'ID d'un item
                            itemStmt.executeUpdate();
                        }
                    }
                }
            }
        }
    }

    public List<Commande> lister() throws SQLException {
        List<Commande> commandes = new ArrayList<>();
        String query = "SELECT * FROM commandes";
        try (Statement stmt = connection.createStatement();
             ResultSet rs = stmt.executeQuery(query)) {

            while (rs.next()) {
                int id = rs.getInt("id");
                String etat = rs.getString("etat");
                List<MenuItem> items = getItemsForCommande(id);
                Commande commande = new Commande(items);
                commande.setEtat(createEtat(etat));
                commandes.add(commande);
            }
        }
        return commandes;
    }

    private List<MenuItem> getItemsForCommande(int commandeId) throws SQLException {
        List<MenuItem> items = new ArrayList<>();
        String query = "SELECT mi.nom, mi.prix, mi.type FROM menu_items mi "
                     + "JOIN commande_items ci ON mi.id = ci.item_id WHERE ci.commande_id = ?";
        try (PreparedStatement stmt = connection.prepareStatement(query)) {
            stmt.setInt(1, commandeId);
            try (ResultSet rs = stmt.executeQuery()) {
                while (rs.next()) {
                    String nom = rs.getString("nom");
                    double prix = rs.getDouble("prix");
                    String type = rs.getString("type");
                    MenuItem item = "plat".equals(type) ? new Plat(nom, prix) : new Boisson(nom, prix);
                    items.add(item);
                }
            }
        }
        return items;
    }

    private int getItemId(String nom) throws SQLException {
        String query = "SELECT id FROM menu_items WHERE nom = ?";
        try (PreparedStatement stmt = connection.prepareStatement(query)) {
            stmt.setString(1, nom);
            try (ResultSet rs = stmt.executeQuery()) {
                if (rs.next()) {
                    return rs.getInt("id");
                }
            }
        }
        return -1; // On a  -1 si l'élément n'existe pas
    }
    
    private CommandeState createEtat(String etat) {
        switch (etat) {
            case "NouvelleCommande":
                return new NouvelleCommande();
            case "EnCours":
                return new CommandeEnCours();
            case "CommandeLivree":
                return new CommandeLivree();
            default:
                return new NouvelleCommande(); // Par défaut
        }
    }

}
