package manger;

import java.sql.SQLException;
import java.time.LocalDate;
import java.time.LocalTime;
import java.util.List;
import java.util.Scanner;

import dao.MenuDao;
import dao.ReservationDao;
import dao.TableDao;
import model.Boisson;
import model.EtatTable;
import model.Plat;
import model.Reservation;
import model.StatutReservation;
import model.TableRestaurant;

public class AdminInterface extends ConsoleInterface {
    private final Scanner scanner;
    private final MenuDao menuDao;
    private final TableDao tableDao;
    private boolean running = true;
    private final ReservationDao reservationDao;

    // ‚úÖ-------------------------------- Constructeur initialisant les DAO correctement
    public AdminInterface() {
        super();
        this.menuDao = new MenuDao();
        this.tableDao = new TableDao();
        this.scanner = new Scanner(System.in);
        this.reservationDao = new ReservationDao();
    }
    
    // üîÅ----------------- M√©thode principale de d√©marrage
    public void start() {
        while (running) {
        	demarrerInterface();
            System.out.print("Choisissez une option: ");
            try {
                int choix = Integer.parseInt(scanner.nextLine());
                processChoice(choix);
            } catch (NumberFormatException | SQLException e) {
                System.out.println("‚ùå Erreur: " + e.getMessage());
            }
        }
        scanner.close();
    }
    
    // üìå --------------------------Affichage du menu principal
    public void demarrerInterface() {
        System.out.println("\n=== ************************** BIENVENUE CHEZ VOUS MONSIEUR ***********************************===");
        System.out.println("1. G√©rer le menu");
        System.out.println("2. G√©rer les tables");
        System.out.println("3. G√©rer les commandes");
        System.out.println("4. Gerer les reservation");
        System.out.println("5. G√©rer les stocks");
        System.out.println("6. Voir rapports de vente");
        System.out.println("7. Quitter");
    }
    
    // üîÄ ---------------------------Redirection selon le choix
    public void processChoice(int choix) throws SQLException {
        switch (choix) {
            case 1 -> gererMenuUI();
            case 2 -> gererTableUI();
            case 3 -> System.out.println("üõ† Gestion des commandes (√† impl√©menter)");
            case 4 -> gererReservation();
            case 5 -> System.out.println("üìä Rapport des ventes (√† impl√©menter)");
            case 6 -> System.out.println("üìä Rapport des ventes (√† impl√©menter)");
            case 7 -> {
                System.out.println("üëã D√©connexion...");
                running = false;
            }
            default -> System.out.println("‚ùå Option invalide.");
        }
    }

   

   

    // ====================== ü•ò GESTION DU MENU ======================

    private void gererMenuUI() throws SQLException {
        boolean retour = true;
        while (retour) {
            System.out.println("\n=== GESTION DU MENU ===");
            System.out.println("1. Ajouter un plat");
            System.out.println("2. Supprimer un plat");
            System.out.println("3. Ajouter une boisson");
            System.out.println("4. Supprimer une boisson");
            System.out.println("5. Voir tous les plats");
            System.out.println("6. Voir toutes les boissons");
            System.out.println("7. Retour");

            int choix = scanner.nextInt();
            scanner.nextLine(); // flush

            switch (choix) {
                case 1 -> ajouterPlat();
                case 2 -> supprimerPlat();
                case 3 -> ajouterBoisson();
                case 4 -> supprimerBoisson();
                case 5 -> afficherPlats();
                case 6 -> afficherBoissons();
                case 7 -> retour = false;
                default -> System.out.println("‚ùå Option invalide.");
            }
        }
    }

    private void ajouterPlat() throws SQLException {
        System.out.print("Nom du plat : ");
        String nom = scanner.nextLine();
        System.out.print("Prix du plat : ");
        double prix = scanner.nextDouble();
        scanner.nextLine();
        menuDao.ajouterPlat(nom, prix);
        System.out.println("‚úÖ Plat ajout√©.");
    }

    private void supprimerPlat() throws SQLException {
        System.out.print("ID du plat √† supprimer : ");
        int id = scanner.nextInt();
        scanner.nextLine();
        menuDao.supprimerPlat(id);
        System.out.println("‚úÖ Plat supprim√©.");
    }

    private void ajouterBoisson() throws SQLException {
        System.out.print("Nom de la boisson : ");
        String nom = scanner.nextLine();
        System.out.print("Prix : ");
        double prix = scanner.nextDouble();
        scanner.nextLine();
        menuDao.ajouterBoisson(nom, prix);
        System.out.println("‚úÖ Boisson ajout√©e.");
    }

    private void supprimerBoisson() throws SQLException {
        System.out.print("ID de la boisson √† supprimer : ");
        int id = scanner.nextInt();
        scanner.nextLine();
        menuDao.supprimerBoisson(id);
        System.out.println("‚úÖ Boisson supprim√©e.");
    }

    private void afficherPlats() throws SQLException {
        List<Plat> plats = menuDao.getAllPlats();
        plats.forEach(System.out::println);
    }

    private void afficherBoissons() throws SQLException {
        List<Boisson> boissons = menuDao.getAllBoissons();
        boissons.forEach(System.out::println);
    }

    // ====================== üçΩÔ∏è GESTION DES TABLES ======================

    private void gererTableUI() throws SQLException {
        boolean retour = true;

        while (retour) {
            System.out.println("\n=== GESTION DES TABLES ===");
            System.out.println("1. Voir toutes les tables");
            System.out.println("2. Voir les tables disponibles");
            System.out.println("3. Ajouter une table");
            System.out.println("4. Changer √©tat d'une table");
            System.out.println("5. Retour");

            int choix = scanner.nextInt();
            scanner.nextLine();

            switch (choix) {
                case 1 -> afficherToutesLesTables();
                case 2 -> afficherTablesDisponibles();
                case 3 -> ajouterNouvelleTable();
                case 4 -> changerEtatTable();
                case 5 -> retour = false;
                default -> System.out.println("‚ùå Option invalide.");
            }
        }
    }

    private void afficherToutesLesTables() {
        try {
            List<TableRestaurant> tables = tableDao.getAllTables();
            tables.forEach(System.out::println);
        } catch (SQLException e) {
            System.out.println("‚ùå Erreur d'affichage : " + e.getMessage());
        }
    }

    private void afficherTablesDisponibles() {
        try {
            List<TableRestaurant> tables = tableDao.getTablesDisponibles();
            System.out.println("--- Tables Disponibles ---");
            tables.forEach(System.out::println);
        } catch (SQLException e) {
            System.out.println("‚ùå Erreur : " + e.getMessage());
        }
    }

    private void ajouterNouvelleTable() {
        try {
            System.out.print("Num√©ro de table : ");
            int numero = scanner.nextInt();
            System.out.print("Capacit√© : ");
            int capacite = scanner.nextInt();
            scanner.nextLine();

            TableRestaurant table = new TableRestaurant(0, numero, capacite, EtatTable.DISPONIBLE);
            tableDao.ajouterTable(table);
            System.out.println("‚úÖ Table ajout√©e !");
        } catch (SQLException e) {
            System.out.println("‚ùå Erreur d'ajout : " + e.getMessage());
        }
    }

    private void changerEtatTable() {
        try {
            System.out.print("ID de la table : ");
            int id = scanner.nextInt();

            System.out.println("Choisissez le nouvel √©tat : ");
            System.out.println("1. DISPONIBLE");
            System.out.println("2. OCCUPEE");
            System.out.println("3. RESERVEE");

            int choix = scanner.nextInt();
            scanner.nextLine();

            EtatTable etat = switch (choix) {
                case 1 -> EtatTable.DISPONIBLE;
                case 2 -> EtatTable.OCCUPEE;
                case 3 -> EtatTable.RESERVEE;
                default -> {
                    System.out.println("‚ùå Choix invalide.");
                    yield null;
                }
            };

            if (etat != null) {
                tableDao.updateEtat(id, etat);
                System.out.println("‚úÖ √âtat mis √† jour.");
            }

        } catch (SQLException e) {
            System.out.println("‚ùå Erreur de mise √† jour : " + e.getMessage());
        }
    }
    
    
    
    
    //--------------------------------------RESERVATION-------------------------------------------------
    
    private void gererReservation() throws SQLException {
        boolean retour = true;
        while (retour) {
            System.out.println("\n=== GESTION DES R√âSERVATIONS ===");
            System.out.println("1. Ajouter une r√©servation");
            System.out.println("2. Modifier une r√©servation");
            System.out.println("3. Supprimer une r√©servation");
            System.out.println("4. Voir toutes les r√©servations");
            System.out.println("5. Retour");

            int choix = scanner.nextInt();
            scanner.nextLine();

            switch (choix) {
                case 1 -> ajouterReservationUI();
                case 2 -> modifierReservationUI();
                case 3 -> supprimerReservationUI();
                case 4 -> afficherReservations();
                case 5 -> retour = false;
                default -> System.out.println("‚ùå Option invalide.");
            }
        }
    }

    private void ajouterReservationUI() {
        try {
            System.out.print("ID de la table : ");
            int tableId = scanner.nextInt();
            scanner.nextLine();

            System.out.print("Nom du client : ");
            String nomClient = scanner.nextLine();

            System.out.print("Date de la r√©servation (YYYY-MM-DD) : ");
            LocalDate date = LocalDate.parse(scanner.nextLine());

            System.out.print("Heure de la r√©servation (HH:MM) : ");
            LocalTime heure = LocalTime.parse(scanner.nextLine());

            Reservation res = new Reservation(tableId, nomClient, date, heure, StatutReservation.CONFIRMEE);
            reservationDao.ajouterReservation(res);
            System.out.println("‚úÖ R√©servation ajout√©e avec ID: " + res.getId());

        } catch (Exception e) {
            System.out.println("‚ùå Erreur lors de l'ajout : " + e.getMessage());
        }
    }
    
    private void modifierReservationUI() {
        try {
            System.out.print("ID de la r√©servation √† modifier : ");
            int id = scanner.nextInt();
            scanner.nextLine();

            Reservation res = reservationDao.getReservationById(id);
            if (res == null) {
                System.out.println("‚ùå R√©servation non trouv√©e.");
                return;
            }

            System.out.println("Laissez vide pour ne pas modifier.");

            System.out.print("Nouveau ID de table (" + res.getTableId() + ") : ");
            String input = scanner.nextLine();
            if (!input.isBlank()) res.setTableId(Integer.parseInt(input));

            System.out.print("Nouveau nom client (" + res.getNomClient() + ") : ");
            input = scanner.nextLine();
            if (!input.isBlank()) res.setNomClient(input);

            System.out.print("Nouvelle date (YYYY-MM-DD) (" + res.getDateReservation() + ") : ");
            input = scanner.nextLine();
            if (!input.isBlank()) res.setDateReservation(LocalDate.parse(input));

            System.out.print("Nouvelle heure (HH:MM) (" + res.getHeureReservation() + ") : ");
            input = scanner.nextLine();
            if (!input.isBlank()) res.setHeureReservation(LocalTime.parse(input));

            System.out.println("Nouveau statut : ");
            System.out.println(" 1. Confirm√©e");
            System.out.println(" 2. Annul√©e");
            System.out.println(" 3. Termin√©e");
            System.out.print("Laissez vide pour garder le statut actuel (" + res.getStatut().getLabel() + ") : ");
            input = scanner.nextLine();
            if (!input.isBlank()) {
                int statutChoix = Integer.parseInt(input);
                res.setStatut(StatutReservation.fromInt(statutChoix));
            }

            reservationDao.updateReservation(res);
            System.out.println("‚úÖ R√©servation mise √† jour.");

        } catch (Exception e) {
            System.out.println("‚ùå Erreur lors de la modification : " + e.getMessage());
        }
    }

    private void supprimerReservationUI() {
        try {
            System.out.print("ID de la r√©servation √† supprimer : ");
            int id = scanner.nextInt();
            scanner.nextLine();

            reservationDao.supprimerReservation(id);
            System.out.println("‚úÖ R√©servation supprim√©e.");
        } catch (Exception e) {
            System.out.println("‚ùå Erreur lors de la suppression : " + e.getMessage());
        }
    }

    private void afficherReservations() {
        try {
            List<Reservation> reservations = reservationDao.getAllReservations();
            if (reservations.isEmpty()) {
                System.out.println("Aucune r√©servation trouv√©e.");
            } else {
                System.out.println("--- Liste des r√©servations ---");
                reservations.forEach(System.out::println);
            }
        } catch (SQLException e) {
            System.out.println("‚ùå Erreur lors de la r√©cup√©ration : " + e.getMessage());
        }
    }
}
